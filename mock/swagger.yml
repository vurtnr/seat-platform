openapi: 3.0.0
info:
  description: Mock API for vue-typescript-admin-template.
  version: 1.0.0
  title: Mock API
  contact:
    email: armourcy@email.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: /mock-api/v1
tags:
  # - name: articles
  #   description: Articles data related api.
  # - name: roles
  #   description: Roles related api.
  # - name: transactions
  #   description: Transactions data related api.
  - name: users
    description: Users related api.
paths:
  /users:
    get:
      tags:
        - users
      summary: Get users list
      description: Return a list of users
      operationId: getUsers
      security:
        - AccessTokenAuth: []
      parameters:
        - name: name
          in: query
          description: Used to filter users by matched username substring
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  data:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/Unauthorized"
  /users/register:
    post:
      tags:
        - users
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: register
      parameters:
        - name: user
          in: query
          required: true
          description: The data for created user.
          schema:
            $ref: "#/components/schemas/User"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
  /users/login:
    post:
      tags:
        - users
      summary: Logs user into the system
      description: Use username and password to login.
      operationId: login
      parameters:
        - name: username
          in: query
          required: true
          description: The user name for login.
          schema:
            $ref: "#/components/schemas/User/properties/username"
        - name: password
          in: query
          required: true
          description: The password for login in clear text.
          schema:
            $ref: "#/components/schemas/User/properties/password"
      responses:
        200:
          description: OK
          headers:
            X-Rate-Limit:
              schema:
                type: integer
                format: int32
              description: calls per hour allowed by the user.
            X-Expires-After:
              schema:
                type: string
                format: date-time
              description: date in UTC when token expires.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: admin-token
        400:
          $ref: "#/components/responses/InvalidUser"
  /users/logout:
    post:
      tags:
        - users
      summary: Logs out current logged in user session
      description: Log out current session.
      operationId: logout
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
  /users/{username}:
    get:
      tags:
        - users
      summary: Get user by user name
      description: Get user by user name.
      operationId: getUserByName
      security:
        - AccessTokenAuth: []
      parameters:
        - name: username
          in: path
          required: true
          description: The name that needs to be fetched.
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  data:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/InvalidUser"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - users
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      security:
        - AccessTokenAuth: []
      parameters:
        - name: username
          in: path
          required: true
          description: Name that need to be updated.
          schema:
            type: string
        - name: user
          in: query
          required: true
          description: The data for updated user.
          schema:
            $ref: "#/components/schemas/User"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  data:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/InvalidUser"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - users
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      security:
        - AccessTokenAuth: []
      parameters:
        - name: username
          in: path
          required: true
          description: The name that needs to be deleted.
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
        400:
          $ref: "#/components/responses/InvalidUser"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
  /users/info:
    post:
      tags:
        - users
      summary: Get current user info
      description: This can only be done by the logged in user.
      operationId: getUserInfo
      security:
        - AccessTokenAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  data:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/Unauthorized"
components:
  securitySchemes:
    AccessTokenAuth:
      type: apiKey
      in: header
      name: X-Access-Token
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    InvalidUser:
      description: Invalid username supplied
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
            schemas:
              Error:
                type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
                required:
                  - code
                  - message
              User:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                  username:
                    type: string
                    example: Armour
                  password:
                    type: string
                    example: 12345678
                  name:
                    type: string
                    example: Chong Guo
                  email:
                    type: string
                    example: armourcy@gmail.com
                  phone:
                    type: string
                    example: 18888888888
                  avatar:
                    type: string
                    format: url
                  introduction:
                    type: string
                    example: Always Sunshine
                  roles:
                    type: array
                    items:
                      $ref: "#/components/schemas/Role/properties/key"
                required:
                  - id
                  - username
                  - password
                  - roles
              Timestamp:
                oneOf:
                  - type: integer
                    format: int32
                    example: 1559605283
                  - type: string
                    format: date-time
                    example: 2017-07-21T17:32:28Z
              AnyValue: {}
